# -*- coding: utf-8 -*-
"""
Created on Thu Jun  1 11:24:26 2023

@author: Marek
"""

import numpy as np
import matplotlib.pyplot as plt
from scipy.optimize import curve_fit


class bridgelosses:
    
    def __init__(self, letter, f0, drive):
       self.letter = letter
       self.f0 = f0
       self.drive = drive
       
       if self.letter == 'A':
           self.parameters = np.array([(0.02, 3.888146648539035e-06, 3.6347829375112222e-06), 
                                (0.38736842105263164, 3.950537585614413e-06, 1.806444961942572e-05), (0.7547368421052633, 4.065880291565628e-06, 2.8442333656676445e-05),
                                (1.122105263157895, 4.129062621950269e-06, 3.154787666322389e-05), (1.4894736842105265, 4.19958703889194e-06, 3.1412540152138495e-05), 
                                (1.856842105263158, 4.270999314926926e-06, 3.036431505875265e-05), (2.22421052631579, 4.3439058015609275e-06, 2.93399322938413e-05), 
                                (2.591578947368421, 4.419352254578303e-06, 3.294352696805038e-05), (2.958947368421053, 4.4908164841160684e-06, 3.2158289339015007e-05), 
                                (3.326315789473685, 4.558835454881028e-06, 3.771130717394819e-05), (3.693684210526316, 4.627096824560337e-06, 3.801502414159045e-05), 
                                (4.0610526315789475, 4.691993249363401e-06, 3.813397781942978e-05), (4.428421052631579, 4.755953325713238e-06, 3.8075490302469256e-05), 
                                (4.795789473684211, 4.818875131148131e-06, 3.83710473750332e-05), (5.163157894736842, 4.878193217671113e-06, 3.8067390320410555e-05), 
                                (5.530526315789474, 4.936871620121209e-06, 3.545391807725285e-05), (5.8978947368421055, 4.991839003464075e-06, 3.5381809983597296e-05), 
                                (6.265263157894737, 5.044146216224007e-06, 3.487167446464933e-05), (6.632631578947369, 5.094368673954236e-06, 3.4773484883276984e-05), 
                                (7.0, 5.141122112776538e-06, 3.333931287787082e-05)])
       elif self.letter == 'B':
           self.parameters = np.array([(0.02, 4.0939254108786785e-06, -1.7317283537945337e-05), (0.7955555555555556, 4.299135221540547e-06, 1.9104977417548003e-05), 
                              (1.5711111111111111, 4.4605090545553046e-06, 1.9455353003894083e-05), (2.3466666666666667, 4.622330247880187e-06, 2.1865489672395617e-05), 
                              (3.1222222222222222, 4.782660576978373e-06, 1.6702870588134417e-05), (3.897777777777778, 4.931626560627381e-06, 1.6783205645477574e-05),
                              (4.673333333333333, 5.0728131628291e-06, 1.5580010695956965e-05), (5.448888888888888, 5.206339101586636e-06, 1.1763313545523494e-05), 
                              (6.224444444444444, 5.327777274116944e-06, 1.1860676434537403e-05), (7.0, 5.437518510549156e-06, 8.19777530593095e-06)])
       elif self.letter == 'C':
           self.parameters = np.array([(0.02, 3.784262422523174e-06, 1.7619430030506588e-05), (0.7955555555555556, 3.9481719967375525e-06, 2.139249757283815e-05), 
                              (1.5711111111111111, 4.067318865370487e-06, 2.069601074043808e-05), (2.3466666666666667, 4.194462830590554e-06, 2.030432560956542e-05),
                              (3.1222222222222222, 4.321518964629931e-06, 1.6898991157203007e-05), (3.897777777777778, 4.437032210024463e-06, 1.7775519710408676e-05),
                              (4.673333333333333, 4.543516891809211e-06, 1.6705777172464892e-05), (5.448888888888888, 4.640745768494025e-06, 1.3964176912493299e-05), 
                              (6.224444444444444, 4.7263923811646196e-06, 1.4198539921608752e-05), (7.0, 4.80088795259933e-06, 9.682830814175101e-06)])
       elif self.letter == 'D':
           self.parameters = np.array([(0.02, 4.377767853318699e-06, -6.186883708717047e-06), (0.7955555555555556, 4.628054586360018e-06, 1.5932754724204908e-05), 
                              (1.5711111111111111, 4.841227056921562e-06, 1.726189132819949e-05), (2.3466666666666667, 5.053232946962043e-06, 1.5732864898987395e-05), 
                              (3.1222222222222222, 5.250059776832687e-06, 1.9812104773495245e-05), (3.897777777777778, 5.436530432049281e-06, 1.722286622775061e-05), 
                              (4.673333333333333, 5.610172535222187e-06, 1.6114138684613817e-05), (5.448888888888888, 5.770984383857619e-06, 1.088254009175233e-05), 
                              (6.224444444444444, 5.9162281482569375e-06, 9.667008831852004e-06), (7.0, 6.05311983377937e-06, 8.092088903725288e-06)])
        
       self.drs = self.parameters[:,0]
       self.slopes = self.parameters[:,1]
       self.consts = self.parameters[:,2]
       self.Rls = self.slopes*self.f0 + self.consts
                 
    def polyfunc (self, x,a,b,c,d):
        y = a*x**3 + b*x**2 + c*x + d
        return y
    
    def fit(self, plot):
        """
        Fit third order polynomial to Rls = F(drives) at given f0
        """
        self.par,self.res = curve_fit(self.polyfunc,self.drs,self.Rls)
        
        if plot == True:
            fig,ax = plt.subplots(1,1)
            ax.plot(self.drs,self.Rls,'ko')
            ax.plot(self.drs,self.polyfunc(self.drs, *self.par),'r--')
            ax.set_title(f'$f_0$: {self.f0:} Hz')
            ax.set_xlabel('$U_D$ (Vrms)')
            ax.set_ylabel('R/$U_D$')
            
        return self.par
    
    def get_loss (self, plot = False):
        self.par = self.fit(plot)
        """
        Get continuous loss factor as a function of drive
        """
        self.loss_factor = self.polyfunc(self.drive, *self.par)
        return self.loss_factor
    
class circuitlosses:
    
    def __init__ (self, f0):
        self.f0 = f0
        self.par = [ 1.64991875e-14,  1.11321488e-09, -1.08292915e-06,  6.27560887e-01]
        
    def cubic_func (self,f,par):
        a,b,c,d = par
        #print(a,b,c,d)
        y = a*f**3 + b*f**2 + c*f + d
        return y
    
    def get_loss(self):
        self.loss = self.cubic_func(self.f0, self.par)
        return self.loss
            
        

plt.figure()




